name: Backend CI/CD using GitHub Actions & Docker
# 워크플로우 실행 조건 설정
on:
  push:
    branches: [ "main" ]
    paths:
     - 'backend/**'
     - 'front/**'
  pull_request:
    branches: [ "main" ]
    paths:
     - 'backend/**'
     - 'front/**'

jobs:
  backend-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4
      # 백엔드 빌드 환경 설정 (JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      # 백엔드 설정 파일 생성
      - name: Create backend configuration files
        run: |
          mkdir -p ./backend/src/main/resources
          cd ./backend/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > application.yml

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      # 백엔드 빌드 실행
      - name: Build Backend
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Set up Docker Environment
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV

      # 도커 이미지 빌드 및 푸시
      - name: Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker save ${{ secrets.DOCKER_USERNAME }}/backend:latest | bzip2 | ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "bunzip2 | docker load"

      # On-premise 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SJ_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SJ_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend --restart always -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker image prune -a -f

  frontend-job:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '22'

        - name: Install and Build Frontend
          run: |
            cd frontend
            npm install
            npm run build

        - name: Set up Docker Environment
          run: |
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV

        - name: Docker build & push
          run: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            cd front
            docker build -t ${{ secrets.DOCKER_USERNAME }}/front:latest .
            docker save ${{ secrets.DOCKER_USERNAME }}/front:latest | bzip2 | ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "bunzip2 | docker load"

        - name: Deploy Frontend
          uses: appleboy/ssh-action@v0.1.4
          with:
            host: ${{ secrets.SJ_HOST }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SJ_PRIVATE_KEY }}
            script: |
              docker stop front || true
              docker rm front || true
              docker run -d --name front --restart always -p 80:80 ${{ secrets.DOCKER_USERNAME }}/front:latest
              docker image prune -a -f
