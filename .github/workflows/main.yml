name: Backend CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # 백엔드 빌드 환경 설정 (JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Docker 환경 변수 설정
      - name: Set up Docker Environment
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV

      # 백엔드 설정 파일 생성
      - name: Create backend configuration files
        run: |
          mkdir -p ./backend/src/main/resources
          cd ./backend/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > application.yml

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      # 백엔드 빌드
      - name: Build Backend
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build -x test

      # Node.js 설정 (프론트엔드 빌드를 위한 Node.js 설치)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'

      # 프론트엔드 빌드 - react-app-rewired 사용
      - name: Install and Build Frontend
        env:
          CI: false
          NODE_ENV: production
          DISABLE_ESLINT_PLUGIN: true
        run: |
          cd frontend
          npm install
          
          # 폴리필 및 react-app-rewired 설치
          npm install --save-dev react-app-rewired crypto-browserify stream-browserify buffer assert util
          
          # config-overrides.js 파일 생성
          echo "const webpack = require('webpack');
          
          module.exports = function override(config) {
            // 폴리필 설정
            config.resolve.fallback = {
              ...config.resolve.fallback,
              crypto: require.resolve('crypto-browserify'),
              stream: require.resolve('stream-browserify'),
              buffer: require.resolve('buffer'),
              util: require.resolve('util'),
              assert: require.resolve('assert')
            };
          
            // Buffer 전역 객체 제공
            config.plugins = [
              ...config.plugins,
              new webpack.ProvidePlugin({
                Buffer: ['buffer', 'Buffer'],
              }),
            ];
          
            return config;
          };" > config-overrides.js
          
          # package.json 스크립트 수정
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.scripts.build = 'react-app-rewired build';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          # 빌드 실행
          npx react-app-rewired build

      # Docker 이미지 빌드 및 푸시
      - name: Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          
          # 백엔드 이미지 빌드 및 푸시
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
          
          # 프론트엔드 이미지 빌드 및 푸시
          cd ../frontend
          docker build \
            --build-arg REACT_APP_GOOGLE_MAPS_API_KEY="${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}" \
            --build-arg REACT_APP_VIDEO_BASE_URL="${{ secrets.REACT_APP_VIDEO_BASE_URL }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # 서버에 docker-compose.yml 생성 및 실행
      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SJ_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SJ_PRIVATE_KEY }}
          script: |
            # 서버 디렉토리로 이동
            mkdir -p ~/sejong-dibb
            cd ~/sejong-dibb
            
            # GitHub Secrets에서 docker-compose.yml 생성
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" > docker-compose.yml
            
            
            # 기존 컨테이너 정리 및 새 배포 실행
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
